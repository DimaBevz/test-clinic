name: Deploy to Amazon ECS

on: 
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Deploy CDK Artefacts
      uses: P47Phoenix/dotnet-cdk-action@v1.0.12
      with:
        working_dir: ./AwsInfrastructure
        cdk_subcommand: 'deploy'
        cdk_args: '--require-approval never --outputs-file output.json' 
        actions_comment: true
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: 'us-east-1'

    - name: Set Output Of AWS deployment
      id: set_var
      run: |
          content=`cat ./AwsInfrastructure/output.json`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=packageJson::$content"

    - name: Check parsing
      run: |
          echo "${{fromJson(steps.set_var.outputs.packageJson).ECSCluster.clinifybackendrepositoryUri}}" 

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ fromJson(steps.set_var.outputs.packageJson).ECSCluster.EcrRepositoryName }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Download current task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ fromJson(steps.set_var.outputs.packageJson).ECSCluster.ClinifyBackTaskDefinitionArn }} > task-definition.json
        jq '.taskDefinition' task-definition.json > transformed-task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: transformed-task-definition.json
        container-name: backend
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ fromJson(steps.set_var.outputs.packageJson).ECSCluster.ClinifyBackEndServiceName }}
        cluster: ${{ fromJson(steps.set_var.outputs.packageJson).ECSCluster.ClinifyBackEndClusterName }}
        wait-for-service-stability: true
